const passport = require('passport');
const User = require('../models/user');
const config = require('../config');
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;
const LocalStrategy = require('passport-local');

/**
 * create Local strategy
 * using user email/ password
 * verify is it correct:
 * yes - done() with user object
 * no - done() without user object
 */
const localOptions = {usernameField: 'email'};
const localLogin = new LocalStrategy(localOptions, function (email, passport, done) {
    User.findOne({email: email}, function (err, user) {
        if (err) {
            return done(err)
        }

        if (!user) {
            return done(null, false)
        }

        user.comparePassword(password, function (err, isMatch) {
            if (err) {
                return done(err)
            }

            if (!isMatch) {
                return done(null, false)
            }

            return done(null, user)
        })
    })
})

/**
 * setup options for Jwt strategy
 * where to find token (in header)
 */
const jwtOptions = {
    jwtFromRequest: ExtractJwt.fromHeader('authorization'),
    secretOrKey: config.secret
}

/**
 * create Jwt strategy,
 * payload - decoded Jwt token (encoded in authentication.js)
 * done - callback when auth user
 * see if user ID in the payload exist in DB:
 * yes - done() with user object
 * no - done() without user object
 */
const jwtLogin = new JwtStrategy(jwtOptions, function (payload, done) {

    User.findById(payload.sub, function (err, user) {
        if (err) {
            return done(err, false)
        }

        if (user) {
            done(null, user)
        } else {
            done(null, false)
        }
    })


})

/**
 * tell passport to use Jwt strategy
 */
passport.use(jwtLogin)
passport.use(localLogin)